/// `Refund` objects allow you to refund a charge that has previously been created
/// but not yet refunded.
///
/// Funds will be refunded to the credit or debit card that was originally charged.  Stripe Tax users with recurring payments and invoices can create [Credit Notes](https://stripe.com/docs/api/credit_notes), which reduce overall tax liability because tax is correctly recalculated and apportioned to the related invoice.  Related guide: [Refunds](https://stripe.com/docs/refunds).
#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
pub struct Refund {
    /// Amount, in %s.
    pub amount: i64,

    /// Balance transaction that describes the impact on your account balance.
    pub balance_transaction: Option<Vec<crate::generated::BalanceTransaction>>,

    /// ID of the charge that was refunded.
    pub charge: Option<Vec<crate::generated::Charge>>,

    /// Time at which the object was created.
    ///
    /// Measured in seconds since the Unix epoch.
    pub created: crate::params::Timestamp,

    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
    ///
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    pub currency: crate::currency::Currency,

    /// An arbitrary string attached to the object.
    ///
    /// Often useful for displaying to users.
    /// (Available on non-card refunds only).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub failure_balance_transaction: Option<Vec<crate::generated::BalanceTransaction>>,

    /// If the refund failed, the reason for refund failure if known.
    ///
    /// Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,

    /// Unique identifier for the object.
    pub id: String,

    /// Email to which refund instructions, if required, are sent to.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instructions_email: Option<String>,

    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
    ///
    /// This can be useful for storing additional information about the object in a structured format.
    pub metadata: Option<crate::params::Metadata>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_action: Option<crate::generated::RefundNextAction>,

    /// ID of the PaymentIntent that was refunded.
    pub payment_intent: Option<Vec<crate::generated::PaymentIntent>>,

    /// Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    pub reason: Option<RefundReason>,

    /// This is the transaction number that appears on email receipts sent for this refund.
    pub receipt_number: Option<String>,

    /// The transfer reversal that is associated with the refund.
    ///
    /// Only present if the charge came from another Stripe account.
    /// See the Connect documentation for details.
    pub source_transfer_reversal: Option<Vec<crate::generated::TransferReversal>>,

    /// Status of the refund.
    ///
    /// For credit card refunds, this can be `pending`, `succeeded`, or `failed`.
    /// For other types of refunds, it can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`.
    /// Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
    pub status: Option<String>,

    /// If the accompanying transfer was reversed, the transfer reversal object.
    ///
    /// Only applicable if the charge was created using the destination parameter.
    pub transfer_reversal: Option<Vec<crate::generated::TransferReversal>>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct GetRefundsParams {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub charge: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<crate::params::RangeQueryTs>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ending_before: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment_intent: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub starting_after: Option<String>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct PostRefundsParams {
    /// A positive integer representing how much to refund.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<i64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub charge: Option<String>,

    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
    ///
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<crate::currency::Currency>,

    /// Customer whose customer balance to refund from.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub customer: Option<String>,

    /// Specifies which fields in the response should be expanded.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,

    /// Address to send refund email, use customer email if not specified.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instructions_email: Option<String>,

    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
    ///
    /// This can be useful for storing additional information about the object in a structured format.
    /// Individual keys can be unset by posting an empty value to them.
    /// All keys can be unset by posting an empty value to `metadata`.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<crate::params::Metadata>,

    /// Origin of the refund.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<PostRefundsParamsOrigin>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment_intent: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<PostRefundsParamsReason>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub refund_application_fee: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reverse_transfer: Option<bool>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct GetRefundsRefundParams {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct PostRefundsRefundParams {
    /// Specifies which fields in the response should be expanded.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,

    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
    ///
    /// This can be useful for storing additional information about the object in a structured format.
    /// Individual keys can be unset by posting an empty value to them.
    /// All keys can be unset by posting an empty value to `metadata`.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<crate::params::Metadata>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct PostRefundsRefundCancelParams {
    /// Specifies which fields in the response should be expanded.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,
}

#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct PostTestHelpersRefundsRefundExpireParams {
    /// Specifies which fields in the response should be expanded.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expand: Option<Vec<String>>,
}

#[derive(Clone, Copy, Debug, serde::Deserialize, Eq, PartialEq, serde::Serialize)]
#[serde(rename_all = "snake_case")]
pub enum RefundReason {
    Duplicate,
    ExpiredUncapturedCharge,
    Fraudulent,
    RequestedByCustomer,
}

impl RefundReason {
    pub fn as_str(self) -> &'static str {
        match self {
            Self::Duplicate => "duplicate",
            Self::ExpiredUncapturedCharge => "expired_uncaptured_charge",
            Self::Fraudulent => "fraudulent",
            Self::RequestedByCustomer => "requested_by_customer",
        }
    }
}

impl AsRef<str> for RefundReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl std::fmt::Display for RefundReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        self.as_str().fmt(f)
    }
}

impl Default for RefundReason {
    fn default() -> Self {
        Self::Duplicate
    }
}

#[derive(Clone, Copy, Debug, serde::Deserialize, Eq, PartialEq, serde::Serialize)]
#[serde(rename_all = "snake_case")]
pub enum PostRefundsParamsOrigin {
    CustomerBalance,
}

impl PostRefundsParamsOrigin {
    pub fn as_str(self) -> &'static str {
        match self {
            Self::CustomerBalance => "customer_balance",
        }
    }
}

impl AsRef<str> for PostRefundsParamsOrigin {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl std::fmt::Display for PostRefundsParamsOrigin {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        self.as_str().fmt(f)
    }
}

impl Default for PostRefundsParamsOrigin {
    fn default() -> Self {
        Self::CustomerBalance
    }
}

#[derive(Clone, Copy, Debug, serde::Deserialize, Eq, PartialEq, serde::Serialize)]
#[serde(rename_all = "snake_case")]
pub enum PostRefundsParamsReason {
    Duplicate,
    Fraudulent,
    RequestedByCustomer,
}

impl PostRefundsParamsReason {
    pub fn as_str(self) -> &'static str {
        match self {
            Self::Duplicate => "duplicate",
            Self::Fraudulent => "fraudulent",
            Self::RequestedByCustomer => "requested_by_customer",
        }
    }
}

impl AsRef<str> for PostRefundsParamsReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl std::fmt::Display for PostRefundsParamsReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        self.as_str().fmt(f)
    }
}

impl Default for PostRefundsParamsReason {
    fn default() -> Self {
        Self::Duplicate
    }
}
pub fn get_refunds(
    client: &crate::Client,
    params: GetRefundsParams,
) -> crate::Response<crate::params::List<crate::generated::Refund>> {
    client.get_query("/refunds", params)
}

pub fn post_refunds(
    client: &crate::Client,
    params: PostRefundsParams,
) -> crate::Response<crate::generated::Refund> {
    client.post_form("/refunds", params)
}

pub fn get_refunds_refund(
    client: &crate::Client,
    refund: String,
    params: GetRefundsRefundParams,
) -> crate::Response<crate::generated::Refund> {
    client.get_query(&format!("/refunds/{refund}", refund = refund), params)
}

pub fn post_refunds_refund(
    client: &crate::Client,
    refund: String,
    params: PostRefundsRefundParams,
) -> crate::Response<crate::generated::Refund> {
    client.post_form(&format!("/refunds/{refund}", refund = refund), params)
}

pub fn post_refunds_refund_cancel(
    client: &crate::Client,
    refund: String,
    params: PostRefundsRefundCancelParams,
) -> crate::Response<crate::generated::Refund> {
    client.post_form(&format!("/refunds/{refund}/cancel", refund = refund), params)
}

pub fn post_test_helpers_refunds_refund_expire(
    client: &crate::Client,
    refund: String,
    params: PostTestHelpersRefundsRefundExpireParams,
) -> crate::Response<crate::generated::Refund> {
    client.post_form(&format!("/test_helpers/refunds/{refund}/expire", refund = refund), params)
}
